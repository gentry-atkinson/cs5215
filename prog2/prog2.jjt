/**
* Author:	Gentry Atkinson
* Source:	eg2.jjt from Sun Microsystems, Inc.
* Class:	CS5318 Spring 2019
* Assign:	PA2
* Descrip:	Read a post-fix expression, print the parse tree, then print
*			the in-fix expression with parenthesis.
**/

options {
  MULTI=true; 
}

PARSER_BEGIN(prog2)

class prog2 {
  public static void main(String args[]) {
    System.out.println("Enter a simplified post-fix expression...");
    prog2 t = new prog2(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(" ");
      System.out.println("The in-fix representation: ");
	  System.out.println(t.infixExpr());
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(prog2)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

TOKEN : /* OPERATORS */
{
	<OPERATOR : ["+", "*"]>
}

ASTStart Start() : {}
{
  E()
  { return jjtThis; }
}


void E() #void : {}
{
		Integer() (E() Operator())*
}


void Integer() #Integer(0) :
{
  Token t;
}
{
  t =<INTEGER_LITERAL>
  {
    jjtThis.setName(t.image);
  }
}

void Operator() #Operator(2) :
{
	Token t;
}
{
	t = <OPERATOR>
	{
    	jjtThis.setName(t.image);
	}
}

String infixExpr() : {}
{
	{
		java.util.Stack<String> s = new java.util.Stack<String>();
		Node t = jjtree.rootNode();
		String tString = t.toString();
		while (tString != "")
		{ 
			try {
				// Push operands 
				if (tString != "+" && tString != "*") 
				{ 
					s.push(tString + ""); 
				} 

				else
				{ 
					String op1 = s.peek(); 
					s.pop(); 
					String op2 = s.peek(); 
					s.pop(); 
					s.push("(" + op2 + tString + 
						op1 + ")");
				}
				t = t.jjtGetChild(0);
				tString = t.toString();
			}
			catch (TokenMgrError e) {
				System.err.println("Bad token at in-fix");
				break;	
			}
		} 
		if (!s.isEmpty())
			return s.peek();
		else
			return "No string";
	}
}

