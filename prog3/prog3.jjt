/**
* Author:	Gentry Atkinson
* Source:	eg2.jjt from Sun Microsystems, Inc.
* Class:	CS5318 Spring 2019
* Assign:	PA3
* Descrip:	Read an application of a  lambda abstraction, print the parse tree, then print
*			the in-fix expression with parenthesis.
**/

options {
  MULTI=true; 
}

PARSER_BEGIN(prog3)

class prog3 {
  public static void main(String args[]) {
    System.out.println("Enter an applied lambda expression: ");
    prog3 t = new prog3(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(" ");
      System.out.println("The normal order evaluation results: ");
	  System.out.println(n.infixExpr());
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(prog3)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
}


TOKEN : /* OPERATORS */
{
	<OPERATOR : ["+", "*", "-", "/"]>
}

TOKEN : /*IDENTIFIER */
{
	<IDENTIFIER : ["a" - "z"](["1"-"9"])? >
}

TOKEN : /* CONSTANT */
{
	<CONSTANT: 
		[<INTEGER_LITERAL>]
	 > 
}

ASTStart Start()  : {}
{
  E()
  { return jjtThis; }
}


void E() #void : {}
{
		Integer() (E() Operator())*
}


void Integer() #Integer(0) :
{
  Token t;
}
{
  t =<INTEGER_LITERAL>
  {
    jjtThis.setName(t.image);
  }
}

void Operator() #Operator(2) :
{
	Token t;
}
{
	t = <OPERATOR>
	{
    		jjtThis.setName(t.image);
	}
}
