/**
* Author:	Gentry Atkinson
* Source:	eg2.jjt from Sun Microsystems, Inc.
* Class:	CS5318 Spring 2019
* Assign:	PA3
* Descrip:	Read an application of a  lambda abstraction, print the parse tree, then print
*			the in-fix expression with parenthesis.
**/

options {
  MULTI=true;
}

PARSER_BEGIN(prog3)

class prog3 {
  public static void main(String args[]) {
    System.out.println("Enter an applied lambda expression: ");
    prog3 t = new prog3(System.in);
    try {
      ASTStart n = t.Start();
      n.dump(" ");
      System.out.println("The lambda expression in the concrete syntax: ");
	    System.out.println(n.astToString());
      System.out.println("The abstract syntax tree with free variables: ");
      n.dumpFV();
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(prog3)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /*IDENTIFIER */
{
	<IDENTIFIER : ["a" - "z"](["1"-"9"])? >
}

TOKEN : /* CONSTANT */
{
	<CONSTANT: <NUM> | <OPERATOR> >
	| < #NUM : ["1" - "9"](["0" - "9"])*>
	| < #OPERATOR : ["+", "-", "*", "/"]>
}


ASTStart Start() : {}
{
  Expr()
  {
    jjtThis.setName("...");
    return jjtThis;
  }
}


void Expr() #void : {}
{
	Constant()
	| Identifier()
	| Application()
	| Abstraction()
}


void Constant() #Constant(0) :
{
	Token t;
}
{
	t = <CONSTANT>
	{
    		jjtThis.setName(t.image);
	}
}

void Identifier() #Identifier(0):
{
	Token t;
}
{
	t = <IDENTIFIER>
	{
		jjtThis.setName(t.image);
    jjtThis.pushFreeVar(t.image);
	}
}

void Abstraction() #Abstraction(>1): {}
{
	"(L" (Identifier())+ "." (Expr())+ ")"
	{
		jjtThis.setName("lamb");
	}
}

void Application() #Application(>1): {}
{
	"(" Expr() (Expr())* ")"
	{
		jjtThis.setName("appl");
	}
}
