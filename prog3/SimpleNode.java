/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

import java.util.*;

public class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected prog3 parser;
  protected String name;
  Set<String> myVars;

  public SimpleNode(int i) {
    id = i;
	  name = "+++";
    myVars = new HashSet<String>();
  }

  public SimpleNode(prog3 p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() { return  name; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + ".");
        }
      }
    }
  }


	public void setName (String name){
		name = name.trim();
		if (name.equals("*"))
			this.name = "mul";
		else if (name.equals("+"))
			this.name = "add";
		else if (name.equals("-"))
			this.name = "sub";
		else if (name.equals("/"))
			this.name = "div";
		else
			this.name = name;
	}

	public String astToString(){
		String output = "";
		if (name == "appl"){
			output = output + "(";
      if (children != null) {
        for (int i = 0; i < children.length; ++i) {
          SimpleNode n = (SimpleNode)children[i];
          if (n != null) {
            output = output + n.astToString();
          }
        }
      }
			output = output + ")";
		}
		else if (name == "lamb"){
			output = output + "L ";
			output = output + jjtGetChild(0).astToString();
			output = output + ".";
      if (children != null) {
        for (int i = 1; i < children.length; ++i) {
          SimpleNode n = (SimpleNode)children[i];
          if (n != null) {
            output = output + n.astToString();
          }
        }
      }
		}
		else if (name == "..."){
			output = output + "( " + jjtGetChild(0).astToString() + " )";
		}
		else {
			output = output + " " + name;
		}

		return output;
	}

  public void pushFreeVar(String s){
    myVars.add(s);
  }

  public Set<String> freeVars() {
    if (name.equals("lamb")){
      Iterator<String> i = jjtGetChild(1).freeVars().iterator();
      while (i.hasNext()){
        myVars.add(i.next());
      }
      i = jjtGetChild(0).freeVars().iterator();
      while (i.hasNext()){
        myVars.remove(i.next());
      }
    }
    else if (name.equals("appl")){
      Iterator<String> i = jjtGetChild(1).freeVars().iterator();
      while (i.hasNext()){
        myVars.add(i.next());
      }
      i = jjtGetChild(0).freeVars().iterator();
      while (i.hasNext()){
        myVars.add(i.next());
      }
    }

      return myVars;
  }

  public void dumpFV(){
    dumpFV(" ");
  }

  public void dumpFV(String prefix){
    System.out.print(prefix + toString());
    System.out.print("\t\t");
    System.out.println(freeVars());
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dumpFV(prefix + ".");
        }
      }
    }

  }
}
/* JavaCC - OriginalChecksum=de56ef6c6ca664a45c4f1c772a1a557a (do not edit this line) */
